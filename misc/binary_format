Binary lisp format:

inspired by protobuf and bson
all entries consist of a type byte followed by a value if that type has it

1. varint encoding: big endian
number of bytes minus one in bottom nybble of type word, ie F3DEADBEEF indicates a 32 bit int
sign extended top byte
trailing bytes

FX - int, with X encoding number of extra data bytes. ints are always signed
--> example: 'F07F' -> +127, or 'F10104' -> +260 or 'F0FF' -> -1
EX - char, with X encoding number of extra data bytes. Chars are at most 24 bits and are encoded as if they're signed, which is fine as utf8 is 21 bit
--> example 'E056' -> V
DX - start of vector, next is an int of length X 
CX - start of blob, next is an int of length X, followed by a type
BX - start of record, next is an int of length X. length includes implicit type field
AX - start of hashtable, next is int of length X, followed by the eq field
8X - backreference, next is int of length X which says how many bytes to go backwards

2. interesting types

00 : end of compound object
--> indicates end of list, vector, etc

01 : null
02 : true
03 : false

04 : double
--> 8 byte double

05 : symbol
06 : string
07 : keyword
--> varint length followed by the bytes

08 : typed vector
--> the subtype, followed by varint length, followed by the bytes

09 : list
--> list of elements terminated by a 00
--> lists are stored in reverse to make CONSing easier
--> (1 2 3) is stored as 09 F003 F002 F001 00
0A : dotted list
--> (1 2 . 3) is stored as 0A F003 F002 F001 00
