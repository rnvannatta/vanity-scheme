Implementing a Repl

We don't actually need to compile the code at runtime, and perhaps that is too slow. Our input to the C
printer is a very constrained subset of the language which can be further constrained: it is a list of applications
and a list of functions.

Consider (+ (* x x) (* y y))

It compiles to (* (lambda (ret1) (* (lambda (ret2) (+ ##sys.next ret1 ret2)) y y) ) x x)

which is unpacked into

LAMBDA1: 1 ((lookup +) ##sys.next (bruijn 1 0) (bruijn 0 0))
LAMBDA2: 1 ((lookup *) (close LAMBDA1) (lookup y) (lookup y))

TOPLEVEL1: ((lookup *) (close LAMBDA2) (lookup x) (lookup x))

We can write a bytecode asm for this:

.symbol *
.symbol +
.symbol x
.symbol y
.closure closure-next ##sys.next

.func toplevel1 0
  save
  lookup $0 *
  close $1 lambda2
  lookup $2 x
  lookup $3 x
  call 4

.func lambda2 1
  save
  lookup $0 *
  close $1 lambda1
  lookup $2 y
  lookup $3 y
  call 4

.func lambda1 1
  lookup $0 +
  mov $1 CLOSURE closure-next
  bruijn $2 1 0
  bruijn $3 0 0
  call 4

We still need to compile a very small snippet of code to translate between tape interpreter and C:

```
lambda1_c:
  mov [rdi+tapefunc_offset], lambda1
  jmp VTapeInterpreter
```
where rdi is holding VRuntime*

Machine description:
  you have general purpose registers from $0 to $32767
  there are a few more more registers: $argc, $env, and $r which hold the number of args, the saved environment and return value from inline calls
  the argument chain is accessed through bruijn

A note on tape addresses: you can have multiple variables with the same name, but only one per type. IE:

.symbol +
.func + 3

operators which only accept eg symbols, like `lookup` only look for the symbol +
operators like mov which move anything need a type

Needed instructions:
lookup reg tape - calls VLookupGlobal with a pointer to the symbol on the tape
bruijn reg i j - finds a variable in the static chain
save - saves the arguments to an environment buffer, which is written to the $env register
close reg tape - creates a fresh closure, requires save to have been called earlier

call n - calls a function with n arguments, the first argument is the function to call
mov reg imm - writes the immediate to the register
mov reg TYPE tape - writes the tape address to the register
