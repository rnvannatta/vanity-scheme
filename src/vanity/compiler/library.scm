(define-library (vanity compiler library)
  (import (vanity core) (vanity compiler utils))
  (export find-library-interface! register-library-interface! header-from-library valid-import? import-basepath import->path gather-dependencies)

  (define library-interfaces '())
  (define (load-library-interface import paths)
    (let* ((fd (search-open-input-file (import->path import) paths))
           (parse (if fd (read-all fd) (error "unable to find library" import)))
           (parse (if (and (pair? parse) (null? (cdr parse))) (car parse)
                      (error "library header must only have one statement"))))
      (close-port fd)
      (register-library-interface! parse)
      #;(set! library-interfaces (cons (cons (cadr parse) parse) library-interfaces))
      parse))
  (define (register-library-interface! lib)
    (if (assoc (cadr lib) library-interfaces) (error "library already registered" (cadr lib)))
    (set! library-interfaces (cons (cons (cadr lib) lib) library-interfaces)))
  (define (find-library-interface! import paths)
    (let ((lookup (assoc import library-interfaces)))
      (if lookup (cdr lookup)
          (load-library-interface import paths))))

  (define (alphanumeric-char? c)
    (let ((i (char->integer c)))
      (or (<= (char->integer #\a) i (char->integer #\z))
          (<= (char->integer #\A) i (char->integer #\Z))
          (<= (char->integer #\0) i (char->integer #\9)))))
  (define (alphanumeric? str)
    (let ((len (string-length str)))
      (let loop ((i 0))
        (if (< i len)
            (if (alphanumeric-char? (string-ref str i)) (loop (+ i 1)) #f)
            #t))))
  (define (andf a b) (and a b))
  (define (valid-import-element? x)
    (and (symbol? x) (> (string-length (symbol->string x)) 0) (alphanumeric? (symbol->string x))))
  (define (valid-import? import)
    (and (pair? import)
         (fold andf #t (map valid-import-element? import))))
  (define (import->path import)
    (if (null? (cdr import)) (sprintf "~A.scmh" (car import))
        (sprintf "~A/~A" (car import) (import->path (cdr import)))))
  (define (import-basepath import)
    (if (null? (cdr import)) "."
        (sprintf "~A/~A" (car import) (import-basepath (cdr import)))))
  (define (header-from-library lib)
    (define (iter exports imports rest)
      (if (null? rest)
          `(define-library-interface ,(cadr lib)
            (import . ,imports)
            (export . ,exports)
            (inline-import)
            (inline-export))
          (match (car rest)
            (('export . syms) (iter (append exports syms) imports (cdr rest)))
            (('import . libs) (iter exports (append imports libs) (cdr rest)))
            (else  (iter exports imports (cdr rest))))))
    (match lib
      (('define-library name . body) (iter '() '() body))
      (('define-library . _) (error "not a valid library" lib))
      (else #f)))
  (define (gather-dependencies statements)
    (if (null? statements) '()
        (match (car statements)
          (('import . libs)
           (append libs (gather-dependencies (cdr statements))))
          (('define-library name . body)
           (append (gather-dependencies body) (gather-dependencies (cdr statements))))
          (else (gather-dependencies (cdr statements)))))))
