include Makefile.sources

vpath %.h src $(INCLUDES)
vpath %.scmh build/include $(INCLUDES)

DEP = $(addprefix build/, $(RUNTIME_SRC:.c=.d) $(RUNTIME_LISP_SRC:.scm=.d) $(SRC:.scm=.d) $(INTERP_SRC:.scm=.d))

OBJ = $(addprefix build/, $(SRC:.scm=.o)) build/ffi.tab.o build/ffi.lex.o
COMPILE_OBJ = $(addprefix build/, $(COMPILE_SRC:.scm=.o))
INTERP_OBJ = $(addprefix build/, $(INTERP_SRC:.scm=.o))

RUNTIME_OBJ = $(addprefix build/, $(RUNTIME_SRC:.c=.o))
RUNTIME_OBJ += $(addprefix build/, $(ASSEMBLY_SRC:.S=.o))
RUNTIME_OBJ +=  $(addprefix build/, $(RUNTIME_LISP_SRC:.scm=.o))

DEP += $(addprefix build/x86_64-w64-mingw32/, $(RUNTIME_SRC:.c=.d) $(RUNTIME_LISP_SRC:.scm=.d))
WINDOWS_RUNTIME_OBJ = $(addprefix build/x86_64-w64-mingw32/, $(RUNTIME_SRC:.c=.o))
WINDOWS_RUNTIME_OBJ += $(addprefix build/x86_64-w64-mingw32/, $(WINDOWS_ASSEMBLY_SRC:.S=.o))
WINDOWS_RUNTIME_OBJ +=  $(addprefix build/x86_64-w64-mingw32/, $(RUNTIME_LISP_SRC:.scm=.o))

BOOT = $(addprefix bin/bootstrap/src/, $(SRC:.scm=.c) $(COMPILE_SRC:.scm=.c))
BOOT += $(addprefix bin/bootstrap/runtime/, $(ASSEMBLY_SRC) $(WINDOWS_ASSEMBLY_SRC) $(RUNTIME_SRC) $(PRIVATE_HEADERS) $(RUNTIME_LISP_SRC:.scm=.c))

STRAP = $(addprefix bootstrap/src/, $(SRC:.scm=.c))

include config.mk

VSCHEME = libvscheme.so.$(MAJOR)
VSC = vsc-$(MAJOR)
VANITY = vanity-$(MAJOR)

.PHONY : deps all install compiler interpreter runtime windows_runtime tests tests_linux tests_windows install_compiler lay_egg testffi
compiler : bin/vsc
interpreter : bin/vanity
runtime : lib/libvscheme.so
windows_runtime : lib/x86_64-w64-mingw32/vscheme.dll
tests : tests_linux tests_windows interpreter
all : compiler interpreter runtime windows_runtime

# the include copy doesn't have an -u on it because
# include files aren't build. Can add the -u if we
# copy the files to the bin directory
install : compiler interpreter runtime windows_runtime
	cp -u lib/libvscheme.so $(INSTALL_DIR)/lib/$(VSCHEME)
	ldconfig
	cp -r include/* $(INSTALL_DIR)/include/.
	cp -u bin/vsc $(INSTALL_DIR)/bin/$(VSC)
	cp -u bin/vanity $(INSTALL_DIR)/bin/$(VANITY)
	ln -sfn $(INSTALL_DIR)/bin/$(VSC) $(INSTALL_DIR)/bin/vsc
	ln -sfn $(INSTALL_DIR)/bin/$(VANITY) $(INSTALL_DIR)/bin/vanity
	mkdir -p $(INSTALL_DIR)/x86_64-w64-mingw32/include
	mkdir -p $(INSTALL_DIR)/x86_64-w64-mingw32/lib
	ln -sfn $(INSTALL_DIR)/include/vscheme $(INSTALL_DIR)/x86_64-w64-mingw32/include/vscheme
	cp -u lib/x86_64-w64-mingw32/vscheme.dll $(INSTALL_DIR)/x86_64-w64-mingw32/lib/

tests_linux : compiler runtime
	@for test in $(addprefix test/, $(TEST_SRC)) ; do \
    ( EXE=`mktemp` ; \
		echo "bin/vsc $$test && ./a.out" ; \
    OVERRIDE=`realpath lib/` ; \
		if ! (LD_LIBRARY_PATH=$$OVERRIDE:$$LD_LIBRARY_PATH bin/vsc -o$$EXE $$test -Wc,-Iinclude -Wc,-lm -Iinclude ) ; then \
			echo "COMPILE FAILURE: $$test"; \
      \rm -f $$EXE ; \
			exit 1; \
	  fi ; \
		if ! (cd `dirname $$test` ; LD_LIBRARY_PATH=$$OVERRIDE:$$LD_LIBRARY_PATH $$EXE) ; then \
			echo "FAILURE: $$test"; \
      \rm -f $$EXE ; \
			exit 1; \
		fi ; \
    \rm -f $$EXE ; ) & \
	done ; \
	wait

tests_windows : compiler runtime windows_runtime
	@for test in $(addprefix test/, $(TEST_SRC)) ; do \
    ( EXE=`mktemp` ; \
		echo "bin/vsc $$test && wine ./a.exe" ; \
    OVERRIDE=`realpath lib/` ; \
		if ! (LD_LIBRARY_PATH=$$OVERRIDE:$$LD_LIBRARY_PATH bin/vsc -o$$EXE $$test -Wc,-Iinclude -Iinclude --platform=windows) ; then \
			echo "COMPILE FAILURE: $$test"; \
      \rm -f $$EXE ; \
			exit 1; \
	  fi ; \
		ln -sf `realpath lib/x86_64-w64-mingw32/vscheme.dll` `dirname $$test`/; \
		if ! (cd `dirname $$test` ; wine $$EXE) ; then \
			echo "FAILURE: $$test"; \
      \rm -f $$EXE ; \
			exit 1; \
		fi ; \
    \rm -f $$EXE ; ) & \
	done ; \
	wait

lay_egg : $(BOOT)
	cp -r include bin/bootstrap/.
	yacc -d -b ffi src/ffi.y
	mv ffi.tab.h bin/bootstrap/src/
	mv ffi.tab.c bin/bootstrap/src/
	lex -t src/ffi.l > bin/bootstrap/src/ffi.lex.c

bin/bootstrap/runtime/%.c : runtime/%.scm
	@mkdir -p `dirname $@`
	vsc -t $< -o $@ $(SCMFLAGS) --shared -Iinclude
	@{ /bin/rm $@; cat misc/license_template - >$@; } <$@	
bin/bootstrap/src/%.c : src/%.scm
	@mkdir -p `dirname $@`
	vsc -t $< -o $@ $(SCMFLAGS) -Ibuild/include
	@{ /bin/rm $@; cat misc/license_template - >$@; } <$@	
bin/bootstrap/runtime/%.c : runtime/%.c
	cp $< $@
bin/bootstrap/runtime/%.h : runtime/%.h
	cp $< $@
bin/bootstrap/runtime/%.S : runtime/%.S
	cp $< $@

deps : $(DEP)

build/%.d : runtime/%.c
	gcc $< -MG -MM -MF $@ -MT $@ -MT $(@:.d=.o) $(CFLAGS) $(IFLAGS)
build/x86_64-w64-mingw32/%.d : runtime/%.c
	gcc $< -MG -MM -MF $@ -MT $@ -MT $(@:.d=.o) $(CFLAGS) $(IFLAGS)
build/%.d : runtime/%.S
	echo '$(@,.d=.o) $@: $<' > $@
build/%.d : src/%.scm
	@mkdir -p `dirname $@`
	@mkdir -p `dirname build/headers/$*.scmh`
	vsc --makefile $< -o $@ --maketarget $(@:.d=.o)
	vsc --makefile $< -o build/headers/$*.d --maketarget $(@:.d=.scmh)
build/%.d : runtime/%.scm
	@mkdir -p `dirname $@`
	@mkdir -p `dirname build/headers/$*.scmh`
	vsc --makefile $< -o $@ --maketarget $(@:.d=.o)
	vsc --makefile $< -o build/headers/$*.d --maketarget $(@:.d=.scmh)
build/x86_64-w64-mingw32/%.d : runtime/%.scm
	@mkdir -p `dirname $@`
	@mkdir -p `dirname build/headers/$*.scmh`
	vsc --makefile $< -o $@ --maketarget $(@:.d=.o)
	vsc --makefile $< -o build/headers/$*.d --maketarget $(@:.d=.scmh)

-include $(DEP)

bin/vsc : $(OBJ) $(COMPILE_OBJ)
	vsc -o $@ $^ $(SCMFLAGS)
bin/vanity : $(OBJ) $(INTERP_OBJ)
	vsc -o $@ $^ $(SCMFLAGS)

lib/libvscheme.so : $(RUNTIME_OBJ)
	gcc -o $@ $^ $(LIBS) $(CFLAGS) -shared

lib/x86_64-w64-mingw32/vscheme.dll : $(WINDOWS_RUNTIME_OBJ)
	@mkdir -p `dirname $@`
	/usr/bin/x86_64-w64-mingw32-gcc -o $@ $^ $(CFLAGS) -shared -Wl,--export-all-symbols -Wl,--stack,8388608

build/%.scmh : src/%.scm
	@mkdir -p `dirname $@`
	vsc -h $< -o $@
	@mkdir -p `dirname build/include/$*.scmh`
	rsync --checksum $@ build/include/$*.scmh

build/%.scmh : runtime/%.scm
	@mkdir -p `dirname $@`
	vsc -h $< -o $@
	@mkdir -p `dirname include/$*.scmh`
	rsync --checksum $@ include/$*.scmh

# Think long and hard why you need -Wc,-Iinclude sometimes to get it working
# but other times you need to not have -Wc,-Iinclude

# I think you need the include when you change ABI but not API
# and you need to not have the include when you break API but not ABI
# and if you break both you're fucked.

build/%.o : runtime/%.scm
	@mkdir -p `dirname $@`
	vsc -c $< -o $@ $(SCMFLAGS) --shared -Iinclude

build/x86_64-w64-mingw32/%.o : runtime/%.scm
	@mkdir -p `dirname $@`
	vsc -c $< -o $@ $(SCMFLAGS) --shared -Iinclude --platform=windows

build/%.o : runtime/%.c
	gcc -c $< -o $@ $(CFLAGS) $(IFLAGS)

build/x86_64-w64-mingw32/%.o : runtime/%.c
	/usr/bin/x86_64-w64-mingw32-gcc -c $< -o $@ $(CFLAGS) $(IFLAGS) -Wa,--no-warn

build/%.o : runtime/%.S 
	gcc -c $< -o $@ $(CFLAGS) $(IFLAGS)

build/x86_64-w64-mingw32/%.o : runtime/%.S 
	/usr/bin/x86_64-w64-mingw32-gcc -c $< -o $@ $(CFLAGS) $(IFLAGS)

build/%.o : src/%.scm
	@mkdir -p `dirname $@`
	vsc -c $< -o $@ $(SCMFLAGS) -Ibuild/include

build/ffi.lex.c : src/ffi.l
	lex -t $< > $@

build/ffi.tab.h build/ffi.tab.c &: src/ffi.y
	yacc -d -b ffi $< && mv ffi.tab.h build/ && mv ffi.tab.c build/

build/ffi.lex.o build/ffi.tab.o : include/vscheme/vmemory.h include/vscheme/vruntime.h include/vscheme/vinlines.h 

build/ffi.lex.o : build/ffi.lex.c build/ffi.tab.h
	gcc -c $< -o $@ $(CFLAGS)

build/ffi.tab.o : build/ffi.tab.c
	gcc -c $< -o $@ $(CFLAGS)

bin/testffi : build/ffi.lex.o build/ffi.tab.o test/testffi.c
	gcc -o $@ $^ $(CFLAGS) -lvscheme

testffi : bin/testffi
