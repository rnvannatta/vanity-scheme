include Makefile.sources

vpath %.h src $(INCLUDES)
vpath %.scmh build/include $(INCLUDES)

DEP = $(addprefix build/, $(RUNTIME_SRC:.c=.d) $(RUNTIME_LISP_SRC:.scm=.d) $(SRC:.scm=.d))
OBJ = $(addprefix build/, $(SRC:.scm=.o)) build/ffi.tab.o build/ffi.lex.o
RUNTIME_OBJ = $(addprefix build/, $(RUNTIME_SRC:.c=.o))
RUNTIME_OBJ += $(addprefix build/, $(ASSEMBLY_SRC:.s=.o))
RUNTIME_OBJ +=  $(addprefix build/, $(RUNTIME_LISP_SRC:.scm=.o))

BOOT = $(addprefix bin/bootstrap/src/, $(SRC:.scm=.c))
BOOT += $(addprefix bin/bootstrap/runtime/, $(ASSEMBLY_SRC) $(RUNTIME_SRC) $(RUNTIME_LISP_SRC:.scm=.c))

STRAP = $(addprefix bootstrap/src/, $(SRC:.scm=.c))

VSCHEME = libvscheme.so.$(MAJOR)
VSC = vsc.$(MAJOR)

include config.mk

.PHONY : deps install compiler runtime tests install_compiler lay_egg testffi
compiler : bin/vsc
runtime : lib/libvscheme.so

# the include copy doesn't have an -u on it because
# include files aren't build. Can add the -u if we
# copy the files to the bin directory
install : compiler runtime
	mkdir -p ~/.local/include/vscheme/
	mkdir -p ~/.local/lib/
	cp -u lib/libvscheme.so $(INSTALL_DIR)/lib/$(VSCHEME)
	ldconfig
	cp -r include/* $(INSTALL_DIR)/include/.
	cp -u bin/vsc $(INSTALL_DIR)/bin/$(VSC)

tests : compiler runtime
	@for test in $(addprefix test/, $(TEST_SRC)) ; do \
		echo "bin/vsc $$test && ./a.out" ; \
    OVERRIDE=`realpath lib/` ; \
		if ! (LD_LIBRARY_PATH=$$OVERRIDE:$$LD_LIBRARY_PATH bin/vsc $$test -Wc,-Iinclude -Wc,-lm -Iinclude ) ; then \
			echo "COMPILE FAILURE: $$test"; \
			exit 1; \
	  fi ; \
    EXE=`realpath a.out` ; \
		if ! (cd `dirname $$test` ; LD_LIBRARY_PATH=$$OVERRIDE:$$LD_LIBRARY_PATH $$EXE) ; then \
			echo "FAILURE: $$test"; \
			exit 1; \
		fi \
	done

lay_egg : $(BOOT)
	cp -r include bin/bootstrap/.
	yacc -d -b ffi src/ffi.y
	mv ffi.tab.h bin/bootstrap/src/
	mv ffi.tab.c bin/bootstrap/src/
	lex -t src/ffi.l > bin/bootstrap/src/ffi.lex.c

bin/bootstrap/runtime/%.c : runtime/%.scm
	@mkdir -p `dirname $@`
	vsc -t $< -o $@ $(SCMFLAGS) --shared -Iinclude
	@{ /bin/rm $@; cat misc/license_template - >$@; } <$@	
bin/bootstrap/src/%.c : src/%.scm
	@mkdir -p `dirname $@`
	vsc -t $< -o $@ $(SCMFLAGS) -Ibuild/include
	@{ /bin/rm $@; cat misc/license_template - >$@; } <$@	
bin/bootstrap/runtime/%.c : runtime/%.c
	cp $< $@
bin/bootstrap/runtime/%.s : runtime/%.s
	cp $< $@

deps : $(DEP)

build/%.d : runtime/%.c
	gcc $< -MG -MM -MF $@ -MT $@ -MT $(@:.d=.o) $(CFLAGS) $(IFLAGS)
build/%.d : runtime/%.s
	echo '$(@,.d=.o) $@: $<' > $@
build/%.d : src/%.scm
	@mkdir -p `dirname $@`
	@mkdir -p `dirname build/headers/$*.scmh`
	vsc --makefile $< -o $@ --maketarget $(@:.d=.o)
	vsc --makefile $< -o build/headers/$*.d --maketarget $(@:.d=.scmh)
build/%.d : runtime/%.scm
	@mkdir -p `dirname $@`
	@mkdir -p `dirname build/headers/$*.scmh`
	vsc --makefile $< -o $@ --maketarget $(@:.d=.o)
	vsc --makefile $< -o build/headers/$*.d --maketarget $(@:.d=.scmh)

-include $(DEP)

bin/vsc : $(OBJ)
	vsc -o $@ $^ $(SCMFLAGS)
lib/libvscheme.so : $(RUNTIME_OBJ)
	gcc -o $@ $^ $(LIBS) $(CFLAGS) -shared

build/%.scmh : src/%.scm
	@mkdir -p `dirname $@`
	vsc -h $< -o $@
	@mkdir -p `dirname build/include/$*.scmh`
	rsync --checksum $@ build/include/$*.scmh

build/%.scmh : runtime/%.scm
	@mkdir -p `dirname $@`
	vsc -h $< -o $@
	@mkdir -p `dirname include/$*.scmh`
	rsync --checksum $@ include/$*.scmh

# Think long and hard why you need -Wc,-Iinclude sometimes to get it working
# but other times you need to not have -Wc,-Iinclude

# I think you need the include when you change ABI but not API
# and you need to not have the include when you break API but not ABI
# and if you break both you're fucked.

build/%.o : runtime/%.scm
	@mkdir -p `dirname $@`
	vsc -c $< -o $@ $(SCMFLAGS) --shared -Iinclude

build/%.o : runtime/%.c build/%.d 
	gcc -c $< -o $@ $(CFLAGS) $(IFLAGS)

build/%.o : runtime/%.s 
	gcc -c $< -o $@ $(CFLAGS) $(IFLAGS)

build/%.o : src/%.scm
	@mkdir -p `dirname $@`
	vsc -c $< -o $@ $(SCMFLAGS) -Ibuild/include

build/ffi.lex.c : src/ffi.l
	lex -t $< > $@

build/ffi.tab.h build/ffi.tab.c &: src/ffi.y
	yacc -d -b ffi $< && mv ffi.tab.h build/ && mv ffi.tab.c build/

build/ffi.lex.o build/ffi.tab.o : include/vscheme/vmemory.h include/vscheme/vruntime.h include/vscheme/vinlines.h 

build/ffi.lex.o : build/ffi.lex.c build/ffi.tab.h
	gcc -c $< -o $@ $(CFLAGS)

build/ffi.tab.o : build/ffi.tab.c
	gcc -c $< -o $@ $(CFLAGS)

bin/testffi : build/ffi.lex.o build/ffi.tab.o test/testffi.c
	gcc -o $@ $^ $(CFLAGS) -lvscheme

testffi : bin/testffi
