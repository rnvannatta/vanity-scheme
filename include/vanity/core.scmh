(define-library-interface (vanity core) (import (vanity seed)) (export null? eof-object? boolean? pair? vector? hash-table? record? procedure? symbol? string? exact? exact-integer? inexact? real? integer? char? nullptr? foreign-pointer? eq? eqv? equal? boolean=? char=? symbol=? string=? not < = > <= >= exact inexact->exact inexact exact->inexact number? complex? rational? positive? negative? zero? + - * / quotient remainder max min abs square sqrt ceiling floor round sin cos tan asin acos atan exp log expt pow cons car cdr set-car! set-cdr! caar cadr cdar cddr caaar caadr cadar caddr cdaar cdadr cddar cdddr caaaar caaadr caadar caaddr cadaar cadadr caddar cadddr cdaaar cdaadr cdadar cdaddr cddaar cddadr cdddar cddddr list list? length list-tail list-ref list-set! list-copy make-list map for-each append reverse memq memv member assq assv assoc num-pairs split-at-right string->list list->string make-string substring string-copy string-copy! string-ref string-set! string-length string->symbol string->number string-append symbol->string list->vector vector->list make-vector vector-copy vector-copy! vector vector-ref vector-set! vector-length vector-map vector-for-each vector-append vector-fill! f64vector? list->f64vector f64vector->list make-f64vector f64vector f64vector-ref f64vector-set! f64vector-length f32vector? list->f32vector f32vector->list make-f32vector f32vector f32vector-ref f32vector-set! f32vector-length s32vector? list->s32vector s32vector->list make-s32vector s32vector s32vector-ref s32vector-set! s32vector-length u16vector? list->u16vector u16vector->list make-u16vector u16vector u16vector-ref u16vector-set! u16vector-length s16vector? list->s16vector s16vector->list make-s16vector s16vector s16vector-ref s16vector-set! s16vector-length u8vector? list->u8vector u8vector->list make-u8vector u8vector u8vector-ref u8vector-set! u8vector-length s8vector? list->s8vector s8vector->list make-s8vector s8vector s8vector-ref s8vector-set! s8vector-length bytevector? list->bytevector bytevector->list make-bytevector bytevector bytevector-u8-ref bytevector-u8-set! bytevector-length read-u8vector read-bytevector typevector? record record-ref record-set! record-length make-hash-table hash-table-ref hash-table-set! hash-table-delete! hash-table->alist char->integer integer->char number->string char-numeric? char-alphabetic? current-output-port current-error-port current-input-port open-input-file open-output-file close-port open-output-string get-output-string with-output-to-file with-input-from-file call-with-port call-with-input-file call-with-output-file read-char read-line read newline display write call/cc call-with-current-continuation call-with-values apply values setter mutator ##vcore.setter ##vcore.mutator make-parameter raise raise-continuable with-exception-handler command-line system open-input-process open-output-process make-temporary-file file-exists? exit current-jiffy jiffies-per-second bitwise-not bitwise-and bitwise-or bitwise-ior bitwise-xor bitwise-xnor bitwise-eqv bitwise-nand bitwise-nor bitwise-andc1 bitwise-andc2 bitwise-orc1 bitwise-orc2 arithmetic-shift bit-count fiber-fork fiber-fork-list fiber-map async await atom? displayln writeln format printf sprintf error) (constant-export (await ##vcore.await) (async ##vcore.async) (fiber-fork-list ##vcore.fiber-fork-list) (raise ##vcore.raise) (bit-count ##vcore.bit-count) (arithmetic-shift ##vcore.arithmetic-shift) (bitwise-orc2 ##vcore.bitwise-orc2) (bitwise-orc1 ##vcore.bitwise-orc1) (bitwise-andc2 ##vcore.bitwise-andc2) (bitwise-andc1 ##vcore.bitwise-andc1) (bitwise-nor ##vcore.bitwise-nor) (bitwise-nand ##vcore.bitwise-nand) (bitwise-not ##vcore.bitwise-not) (jiffies-per-second ##vcore.jiffies-per-second) (current-jiffy ##vcore.current-jiffy) (exit ##vcore.exit) (make-temporary-file ##vcore.make-temporary-file) (open-output-process ##vcore.open-output-process) (open-input-process ##vcore.open-input-process) (system ##vcore.system) (command-line ##vcore.command-line) (apply ##vcore.apply) (call-with-values ##vcore.call-with-values) (call-with-current-continuation ##vcore.call/cc) (call/cc ##vcore.call/cc) (integer->char ##vcore.integer->char) (char->integer ##vcore.char-integer) (hash-table-delete! ##vcore.hash-table-delete!) (hash-table-hash-function ##vcore.hash-table-hash-function) (hash-table-equivalence-function ##vcore.hash-table-equivalence-function) (record-length ##vcore.record-length) (record-set! ##vcore.record-set!) (record-ref ##vcore.record-ref) (record ##vcore.record) (s8vector-length ##vcore.s8vector-length) (s8vector-set! ##vcore.s8vector-set!) (s8vector-ref ##vcore.s8vector-ref) (list->s8vector ##vcore.list->s8vector) (s8vector? ##vcore.s8vector?) (bytevector-length ##vcore.u8vector-length) (bytevector-u8-set! ##vcore.u8vector-set!) (bytevector-u8-ref ##vcore.u8vector-ref) (list->bytevector ##vcore.list->u8vector) (bytevector? ##vcore.u8vector?) (u8vector-length ##vcore.u8vector-length) (u8vector-set! ##vcore.u8vector-set!) (u8vector-ref ##vcore.u8vector-ref) (list->u8vector ##vcore.list->u8vector) (u8vector? ##vcore.u8vector?) (s16vector-length ##vcore.s16vector-length) (s16vector-set! ##vcore.s16vector-set!) (s16vector-ref ##vcore.s16vector-ref) (list->s16vector ##vcore.list->s16vector) (s16vector? ##vcore.s16vector?) (u16vector-length ##vcore.u16vector-length) (u16vector-set! ##vcore.u16vector-set!) (u16vector-ref ##vcore.u16vector-ref) (list->u16vector ##vcore.list->u16vector) (u16vector? ##vcore.u16vector?) (s32vector-length ##vcore.s32vector-length) (s32vector-set! ##vcore.s32vector-set!) (s32vector-ref ##vcore.s32vector-ref) (list->s32vector ##vcore.list->s32vector) (s32vector? ##vcore.s32vector?) (f64vector-length ##vcore.f64vector-length) (f64vector-set! ##vcore.f64vector-set!) (f64vector-ref ##vcore.f64vector-ref) (list->f64vector ##vcore.list->f64vector) (f64vector? ##vcore.f64vector?) (f32vector-length ##vcore.f32vector-length) (f32vector-set! ##vcore.f32vector-set!) (f32vector-ref ##vcore.f32vector-ref) (list->f32vector ##vcore.list->f32vector) (f32vector? ##vcore.f32vector?) (vector-length ##vcore.vector-length) (vector-set! ##vcore.vector-set!) (vector-ref ##vcore.vector-ref) (list->vector ##vcore.list->vector) (symbol->string ##vcore.symbol->string) (string->number ##vcore.string->number) (string->symbol ##vcore.string->symbol) (string-length ##vcore.string-length) (string-set! ##vcore.string-set!) (string-ref ##vcore.string-ref) (string-copy! ##vcore.string-copy!) (string-copy ##vcore.substring) (substring ##vcore.substring) (make-string ##vcore.make-string) (set-cdr! ##vcore.set-cdr!) (set-car! ##vcore.set-car!) (cdr ##vcore.cdr) (car ##vcore.car) (cons ##vcore.cons) (remainder ##vcore.remainder) (quotient ##vcore.quotient) (/ ##vcore./) (* ##vcore.*) (- ##vcore.-) (+ ##vcore.+) (exact->inexact ##vcore.inexact) (inexact ##vcore.inexact) (inexact->exact ##vcore.exact) (exact ##vcore.exact) (> ##vcore.>) (>= ##vcore.>=) (= ##vcore.=) (<= ##vcore.<=) (< ##vcore.<) (not ##vcore.not) (string=? ##vcore.blob=?) (char=? ##vcore.eq?) (boolean=? ##vcore.eq?) (eqv? ##vcore.eqv?) (eq? ##vcore.eq?) (real? ##vcore.double?) (inexact? ##vcore.double?) (integer? ##vcore.int?) (exact-integer? ##vcore.int?) (exact? ##vcore.int?) (foreign-pointer? ##vcore.foreign-pointer?) (nullptr? ##vcore.nullptr?) (char? ##vcore.char?) (string? ##vcore.string?) (symbol? ##vcore.symbol?) (procedure? ##vcore.procedure?) (record? ##vcore.record?) (hash-table? ##vcore.hash-table?) (vector? ##vcore.vector?) (pair? ##vcore.pair?) (eof-object? ##vcore.eof-object?) (null? ##vcore.null?)))
