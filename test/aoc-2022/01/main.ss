(import (vanity core))
(define file (open-input-file "input"))

(define (fattest-elf port)
  (define (max a b)
    (if (< a b) b a))
  (let loop ((cur 0) (top 0))
    (let ((line (read-line port)))
      (cond ((eof-object? line) (max cur top))
            ((string->number line) => (lambda (x) (loop (+ x cur) top)))
            (else (loop 0 (max cur top)))))))
(define (fattest-3-elves port)
  (define (insert x arr)
    (cond ((null? arr) (list x))
          ((< x (car arr)) (cons x arr))
          (else (cons (car arr) (insert x (cdr arr))))))
  (define (cons-top3 x top3)
    (cdr (insert x top3)))
  (let loop ((cur 0) (top3 '(0 0 0)))
    (let ((line (read-line port)))
      (cond ((eof-object? line) (apply + (cons-top3 cur top3)))
            ((string->number line) => (lambda (x) (loop (+ x cur) top3)))
            (else (loop 0 (cons-top3 cur top3)))))))

;(display "part 1: ")
;(display (fattest-elf file))
;(newline)
(if (not (= (fattest-elf file) 71502)) (exit 1))
(close-port file)


(define file (open-input-file "input"))
;(display "part 2: ")
;(display (fattest-3-elves file))
;(newline)
(close-port file)
