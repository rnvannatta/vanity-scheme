include Makefile.sources

.PHONY : deps all install compiler interpreter windows_interpreter runtime windows_runtime tests tests_linux tests_windows install_compiler lay_egg testffi

CC = gcc
# for when I fuck up the bootstrap
#PATCH := LD_PRELOAD=~/vscheme/libpatch.so
PATCH :=

windows_runtime windows_interpreter : CC = /usr/bin/x86_64-w64-mingw32-gcc
windows_runtime windows_interpreter : CFLAGS += -Wa,--no-warn -lshlwapi
windows_runtime windows_interpreter : SCMFLAGS += --platform=windows -Wc,-lshlwapi

wasm_runtime : CC = emcc
wasm_runtime : CFLAGS += -Wno-gnu -DVANITY_PURE_C -Wno-unused-variable -Wno-unused-command-line-argument
wasm_runtime : SCMFLAGS += --platform=emscripten

vpath %.h src $(INCLUDES)
vpath %.scmh build/include $(INCLUDES)

DEP = $(addprefix build/, $(RUNTIME_SRC:.c=.d) $(RUNTIME_LISP_SRC:.scm=.d) $(SRC:.scm=.d) $(COMPILE_SRC:.scm=.d) $(INTERP_SRC:.scm=.d)) build/ffi.tab.d build/ffi.lex.d

OBJ = $(addprefix build/, $(SRC:.scm=.o)) build/ffi.tab.o build/ffi.lex.o
COMPILE_OBJ = $(addprefix build/, $(COMPILE_SRC:.scm=.o))
INTERP_OBJ = $(addprefix build/, $(INTERP_SRC:.scm=.o))

RUNTIME_OBJ = $(addprefix build/, $(RUNTIME_SRC:.c=.o))
RUNTIME_OBJ += $(addprefix build/, $(ASSEMBLY_SRC:.S=.o))
RUNTIME_OBJ +=  $(addprefix build/, $(RUNTIME_LISP_SRC:.scm=.o))

DEP += $(addprefix build/x86_64-w64-mingw32/, $(RUNTIME_SRC:.c=.d) $(RUNTIME_LISP_SRC:.scm=.d) $(SRC:.scm=.d) $(COMPILE_SRC:.scm=.d) $(INTERP_SRC:.scm=.d)) build/x86_64-w64-mingw32/ffi.tab.d build/x86_64-w64-mingw32/ffi.lex.d

WINDOWS_OBJ = $(addprefix build/x86_64-w64-mingw32/, $(SRC:.scm=.o)) build/x86_64-w64-mingw32/ffi.tab.o build/x86_64-w64-mingw32/ffi.lex.o
WINDOWS_INTERP_OBJ = $(addprefix build/x86_64-w64-mingw32/, $(INTERP_SRC:.scm=.o))

WINDOWS_RUNTIME_OBJ = $(addprefix build/x86_64-w64-mingw32/, $(RUNTIME_SRC:.c=.o))
WINDOWS_RUNTIME_OBJ += $(addprefix build/x86_64-w64-mingw32/, $(WINDOWS_ASSEMBLY_SRC:.S=.o))
WINDOWS_RUNTIME_OBJ +=  $(addprefix build/x86_64-w64-mingw32/, $(RUNTIME_LISP_SRC:.scm=.o))

WASM_OBJ = $(addprefix build/wasm/, $(WASM_SRC:.c=.o))
WASM_OBJ +=  $(addprefix build/wasm/, $(RUNTIME_LISP_SRC:.scm=.o))

BOOT = $(addprefix bin/bootstrap/src/, $(SRC:.scm=.c) $(COMPILE_SRC:.scm=.c))
BOOT += $(addprefix bin/bootstrap/runtime/, $(ASSEMBLY_SRC) $(RUNTIME_SRC) $(PRIVATE_HEADERS) $(RUNTIME_LISP_SRC:.scm=.c))

include config.mk

VSCHEME = libvscheme.so.$(MAJOR)
VSC = vsc-$(MAJOR)
VANITY = vanity-$(MAJOR)

compiler : bin/vsc
interpreter : bin/vanity
runtime : lib/libvscheme.so
windows_runtime : lib/x86_64-w64-mingw32/vscheme.dll
windows_interpreter : bin/x86_64-w64-mingw32/vanity.exe
wasm_runtime : lib/wasm/libvscheme.a
tests : tests_linux tests_windows interpreter wasm_runtime
all : compiler interpreter windows_interpreter runtime windows_runtime wasm_runtime

# the include copy doesn't have an -u on it because
# include files aren't build. Can add the -u if we
# copy the files to the bin directory
install : compiler interpreter runtime windows_runtime wasm_runtime
	cp -u lib/libvscheme.so $(INSTALL_DIR)/lib/$(VSCHEME)
	ldconfig
	cp -r include/* $(INSTALL_DIR)/include/.
	cp -u bin/vsc $(INSTALL_DIR)/bin/$(VSC)
	cp -u bin/vanity $(INSTALL_DIR)/bin/$(VANITY)
	ln -sfn $(INSTALL_DIR)/bin/$(VSC) $(INSTALL_DIR)/bin/vsc
	ln -sfn $(INSTALL_DIR)/bin/$(VANITY) $(INSTALL_DIR)/bin/vanity
	mkdir -p $(INSTALL_DIR)/x86_64-w64-mingw32/include
	mkdir -p $(INSTALL_DIR)/x86_64-w64-mingw32/lib
	ln -sfn $(INSTALL_DIR)/include/vscheme $(INSTALL_DIR)/x86_64-w64-mingw32/include/vscheme
	mkdir -p $(EMSCRIPTEN_INSTALL_DIR)/lib/wasm32-emscripten/
	cp -u lib/x86_64-w64-mingw32/vscheme.dll $(INSTALL_DIR)/x86_64-w64-mingw32/lib/
	cp -u lib/wasm/libvscheme.a $(EMSCRIPTEN_INSTALL_DIR)/lib/wasm32-emscripten/libvscheme.a
	cp -r include/* $(EMSCRIPTEN_INSTALL_DIR)/include/.
	cp -u vendor/lib/wasm/* $(EMSCRIPTEN_INSTALL_DIR)/lib/wasm32-emscripten/

tests_linux : compiler runtime
	@for test in $(addprefix test/, $(TEST_SRC)) ; do \
    ( EXE=`mktemp` ; \
		echo "bin/vsc $$test && ./a.out" ; \
    OVERRIDE=`realpath lib/` ; \
		if ! ($(PATCH) LD_LIBRARY_PATH=$$OVERRIDE:$$LD_LIBRARY_PATH bin/vsc -o$$EXE $$test -O2 -Wc,-Llib -Wc,-Iinclude -Wc,-lm -Iinclude ) ; then \
			echo "COMPILE FAILURE: $$test"; \
      \rm -f $$EXE ; \
			exit 1; \
	  fi ; \
		if ! (cd `dirname $$test` ; $(PATCH) LD_LIBRARY_PATH=$$OVERRIDE:$$LD_LIBRARY_PATH $$EXE) ; then \
			echo "FAILURE: $$test"; \
      \rm -f $$EXE ; \
			exit 1; \
		fi ; \
    \rm -f $$EXE ; ) & \
	done ; \
	wait

tests_windows : compiler runtime windows_runtime
	@for test in $(addprefix test/, $(TEST_SRC)) ; do \
    ( EXE=`mktemp` ; \
		echo "bin/vsc $$test && wine ./a.exe" ; \
    OVERRIDE="`realpath lib/`:`realpath vendor/lib/`" ; \
		if ! (LD_LIBRARY_PATH=$$OVERRIDE:$$LD_LIBRARY_PATH bin/vsc -o$$EXE $$test -Wc,-Llib/x86_64-w64-mingw32 -Wc,-Lvendor/lib/x86_64-w64-mingw32  -Wc,-Iinclude -Iinclude --platform=windows) ; then \
			echo "COMPILE FAILURE: $$test"; \
      \rm -f $$EXE ; \
			exit 1; \
	  fi ; \
		ln -sf `realpath lib/x86_64-w64-mingw32/vscheme.dll` `dirname $$test`/; \
		ln -sf `realpath vendor/lib/x86_64-w64-mingw32/dfile.dll` `dirname $$test`/; \
		if ! (cd `dirname $$test` ; wine $$EXE) ; then \
			echo "FAILURE: $$test"; \
      \rm -f $$EXE ; \
			exit 1; \
		fi ; \
    \rm -f $$EXE ; ) & \
	done ; \
	wait

lay_egg : $(BOOT)
	cp -r include bin/bootstrap/.
	bison -d -b ffi src/ffi.y
	mv ffi.tab.h bin/bootstrap/src/
	mv ffi.tab.c bin/bootstrap/src/
	lex -t src/ffi.l > bin/bootstrap/src/ffi.lex.c

bin/bootstrap/runtime/%.c : runtime/%.scm
	@mkdir -p `dirname $@`
	$(PATCH) vsc -t $< -o $@ $(SCMFLAGS) --shared -Iinclude
	@{ /bin/rm $@; cat misc/license_template - >$@; } <$@	
bin/bootstrap/src/%.c : src/%.scm
	@mkdir -p `dirname $@`
	$(PATCH) vsc -t $< -o $@ $(SCMFLAGS) -Ibuild/include
	@{ /bin/rm $@; cat misc/license_template - >$@; } <$@	
bin/bootstrap/src/%.c : config/%.scm
	@mkdir -p `dirname $@`
	$(PATCH) vsc -t $< -o $@ $(SCMFLAGS) -Ibuild/include
	@{ /bin/rm $@; cat misc/license_template - >$@; } <$@	
bin/bootstrap/src/%.c : src/%.c
	cp $< $@
bin/bootstrap/src/%.S : src/%.S
	cp $< $@
bin/bootstrap/runtime/%.c : runtime/%.c
	cp $< $@
bin/bootstrap/runtime/%.h : runtime/%.h
	cp $< $@
bin/bootstrap/runtime/%.S : runtime/%.S
	cp $< $@

deps : $(DEP)

build/% : runtime/%
	@mkdir -p $(dir $@)
	ln -sfr $< $@
build/% : src/%
	@mkdir -p $(dir $@)
	ln -sfr $< $@
build/x86_64-w64-mingw32/% : runtime/%
	@mkdir -p $(dir $@)
	ln -sfr $< $@
build/x86_64-w64-mingw32/% : src/%
	@mkdir -p $(dir $@)
	ln -sfr $< $@
build/wasm/% : runtime/%
	@mkdir -p $(dir $@)
	ln -sfr $< $@
build/% : config/%
	@mkdir -p $(dir $@)
	ln -sfr $< $@

build/%.d : build/%.c
	gcc $< -MG -MM -MF $@ -MT $@ -MT $(@:.d=.o) $(CFLAGS) $(IFLAGS) -Isrc -Iruntime

build/%.d : build/%.scm
	@mkdir -p `dirname build/headers/$*.scmh`
	vsc --makefile $< -o $@ --maketarget $(@:.d=.o)
	vsc --makefile $< -o build/headers/$*.d --maketarget $(@:.d=.scmh)

-include $(DEP)

bin/vsc : $(OBJ) $(COMPILE_OBJ)
	vsc -o $@ $^ $(SCMFLAGS) -Wc,-Llib
bin/vanity : $(OBJ) $(INTERP_OBJ)
	vsc -o $@ $^ $(SCMFLAGS) -Wc,-Llib

# I don't like this, any files vsc doesn't understand should just be passed to cc
bin/x86_64-w64-mingw32/vanity.exe : $(WINDOWS_OBJ) $(WINDOWS_INTERP_OBJ) build/vanity.res
	@mkdir -p `dirname $@`
#	vsc -o $@ $^ $(SCMFLAGS)
	/usr/bin/x86_64-w64-mingw32-gcc -o $@ $^ $(CFLAGS) -L$(INSTALL_DIR)/x86_64-w64-mingw32/lib/ -lvscheme -Wl,--no-as-needed -Wl,--export-all-symbols -Wl,--stack,8388608 -Wmissing-braces -masm=intel

lib/libvscheme.so : $(RUNTIME_OBJ)
	@mkdir -p `dirname $@`
	gcc -o $@ $^ $(LIBS) $(CFLAGS) -shared

lib/x86_64-w64-mingw32/vscheme.dll : $(WINDOWS_RUNTIME_OBJ)
	@mkdir -p `dirname $@`
	/usr/bin/x86_64-w64-mingw32-gcc -o $@ $^ $(CFLAGS) -shared -Wl,--export-all-symbols -Wl,--stack,8388608 -Lvendor/lib/x86_64-w64-mingw32 -ldfile

lib/wasm/libvscheme.a : $(WASM_OBJ)
	@mkdir -p `dirname $@`
	emar rcs $@ $^

build/%.o : build/%.scm
	$(PATCH) vsc -c $< -o $@ $(SCMFLAGS) -Wc,-fPIC -Iinclude -Ibuild/include
build/%.o : build/%.c
	$(CC) -c $< -o $@ $(CFLAGS) $(IFLAGS) -Iruntime -Isrc

build/%.o : build/%.S 
	$(CC) -c $< -o $@ $(CFLAGS) $(IFLAGS)

build/%.lex.c : build/%.l
	lex -o $@ $< 

build/%.tab.h build/%.tab.c &: build/%.y
	bison -d -b build/$* $<

bin/testffi : build/ffi.lex.o build/ffi.tab.o test/testffi.c
	gcc -o $@ $^ $(CFLAGS) -lvscheme

testffi : bin/testffi

build/vanity.res : resources/vanity.rc resources/vanity.ico
	/usr/bin/x86_64-w64-mingw32-windres -O coff -i $< -o $@

.NOTINTERMEDIATE : $(addprefix build/, $(ASSEMBLY_SRC) $(COMPILE_SRC) $(INTERP_SRC) ffi.y ffi.l) $(addprefix build/x86_64-w64-mingw32/, $(WINDOWS_ASSEMBLY_SRC) $(COMPILE_SRC) $(INTERP_SRC) ffi.y ffi.l)
